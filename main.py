import sys
import os
import json
import requests
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QTextEdit, QPushButton,
    QVBoxLayout, QHBoxLayout, QFileDialog, QProgressBar, QMessageBox,
    QListWidget, QTabWidget, QLineEdit, QPlainTextEdit, QTableWidget,
    QTableWidgetItem, QDialog, QVBoxLayout
)
from PyQt5.QtCore import Qt
from bs4 import BeautifulSoup
from openpyxl import Workbook


class CarDetailsDialog(QDialog):
    def __init__(self, car_data, parent=None):
        super().__init__(parent)
        self.setWindowTitle("üöó –î–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        self.setGeometry(100, 100, 450, 400)
        layout = QVBoxLayout()
        for key, value in car_data.items():
            label = QLabel(f"<b>{key}:</b> {value}")
            layout.addWidget(label)
        close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(self.accept)
        layout.addWidget(close_button)
        self.setLayout(layout)


class HelpTab(QWidget):
    def __init__(self):
        super().__init__()
        layout = QVBoxLayout()
        title = QLabel("<h2>‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ</h2>")
        title.setStyleSheet("font-size: 16px; font-weight: bold;")
        layout.addWidget(title)
        instructions = QLabel("""
        <h3>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É:</h3>
        <ol>
            <li><b>–í–∫–ª–∞–¥–∫–∞ 'üì• –ó–∞–≥—Ä—É–∑–∫–∞'</b>: –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Drom.ru (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É).</li>
            <li>–ù–∞–∂–º–∏—Ç–µ <i>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏</i>, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –≤ —Å–ø–∏—Å–æ–∫.</li>
            <li>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ <i>üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É</i>.</li>
            <li>–ù–∞–∂–º–∏—Ç–µ <i>üíæ –°–∫–∞—á–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å</i>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.</li>
            <li><b>–í–∫–ª–∞–¥–∫–∞ 'üîç –ü–∞—Ä—Å–∏–Ω–≥'</b>: –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ HTML-—Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏.</li>
            <li>–ù–∞–∂–º–∏—Ç–µ <i>üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</i>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.</li>
            <li>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ TXT –∏–ª–∏ Excel.</li>
        </ol>
        """)
        instructions.setWordWrap(True)
        layout.addWidget(instructions)

        functions = QLabel("""
        <h3>–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:</h3>
        <ul>
            <li><b>–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏</b> ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ URL –≤ —Å–ø–∏—Å–æ–∫.</li>
            <li><b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML</b> ‚Äî —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É.</li>
            <li><b>–ü–∞—Ä—Å–∏–Ω–≥</b> ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ HTML —Ñ–∞–π–ª–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ–±–µ–≥, —Ü–µ–Ω–∞, –¥–≤–∏–≥–∞—Ç–µ–ª—å, –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á).</li>
            <li><b>–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏</b> ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é.</li>
            <li><b>–≠–∫—Å–ø–æ—Ä—Ç</b> ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT –∏–ª–∏ Excel.</li>
        </ul>
        """)
        functions.setWordWrap(True)
        layout.addWidget(functions)

        errors = QLabel("""
        <h3>–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏–µ:</h3>
        <ul>
            <li><b>–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞</b> ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.</li>
            <li><b>–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</b> ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .html.</li>
            <li><b>–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π URL</b> ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –≤–µ–¥—É—Ç –Ω–∞ drom.ru.</li>
            <li><b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ</b> ‚Äî —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –∏–º–µ—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</li>
        </ul>
        """)
        errors.setWordWrap(True)
        layout.addWidget(errors)
        layout.addStretch()
        self.setLayout(layout)


class ModernParserApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üöó –ü–∞—Ä—Å–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π Drom.ru")
        self.setGeometry(100, 100, 900, 700)
        self.setStyleSheet("""
            background-color: #2e2e2e;
            color: white;
            font-family: 'Segoe UI', sans-serif;
        """)
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.html_files_paths = []  # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.results = []
        self.downloaded_files = []  # –°–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.urls = []  # –°–ø–∏—Å–æ–∫ URL
        self.init_ui()

    def init_ui(self):
        main_layout = QVBoxLayout()
        # === –í–∫–ª–∞–¥–∫–∏ ===
        tabs = QTabWidget()
        tabs.setStyleSheet("""
            QTabBar::tab {
                background: #3e3e3e;
                color: white;
                padding: 10px;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }
            QTabBar::tab:selected {
                background: #4CAF50;
            }
        """)
        download_tab = QWidget()
        parse_tab = QWidget()
        help_tab = HelpTab()  # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ "–°–ø—Ä–∞–≤–∫–∞"
        tabs.addTab(download_tab, "üì• –ó–∞–≥—Ä—É–∑–∫–∞")
        tabs.addTab(parse_tab, "üîç –ü–∞—Ä—Å–∏–Ω–≥")
        tabs.addTab(help_tab, "‚ùì –°–ø—Ä–∞–≤–∫–∞")
        self.create_download_tab(download_tab)
        self.create_parse_tab(parse_tab)
        main_layout.addWidget(tabs)
        self.setLayout(main_layout)

    def create_download_tab(self, tab):
        layout = QVBoxLayout()
        self.url_input = QTextEdit()
        self.url_input.setPlaceholderText("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
        self.url_input.setStyleSheet("background-color: #1e1e1e; color: white; border-radius: 5px;")
        self.add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏")
        self.url_list = QListWidget()
        self.url_list.setStyleSheet("background-color: #1e1e1e; color: white; border-radius: 5px;")
        self.folder_button = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É")
        self.folder_path = QLineEdit()
        self.folder_path.setPlaceholderText("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        self.folder_path.setStyleSheet("background-color: #1e1e1e; color: white; border-radius: 5px;")
        self.save_all_button = QPushButton("üíæ –°–∫–∞—á–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_all_button.setStyleSheet("background-color: #4CAF50; color: white; padding: 10px; border-radius: 5px;")
        self.progress_bar_download = QProgressBar()
        self.progress_bar_download.setValue(0)
        self.progress_bar_download.setTextVisible(False)
        self.progress_bar_download.setStyleSheet("""
            QProgressBar {
                border: 1px solid #444;
                border-radius: 5px;
                background-color: #1e1e1e;
            }
            QProgressBar::chunk {
                background-color: #2196F3;
                width: 20px;
            }
        """)
        layout.addWidget(QLabel("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏:"))
        layout.addWidget(self.url_input)
        layout.addWidget(self.add_button)
        layout.addWidget(QLabel("üìã –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫:"))
        layout.addWidget(self.url_list)
        layout.addWidget(self.folder_button)
        layout.addWidget(self.folder_path)
        layout.addWidget(self.save_all_button)
        layout.addWidget(self.progress_bar_download)
        tab.setLayout(layout)
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        self.add_button.clicked.connect(self.add_urls)
        self.folder_button.clicked.connect(self.select_folder)
        self.save_all_button.clicked.connect(self.download_selected)

    def create_parse_tab(self, tab):
        layout = QVBoxLayout()
        self.load_single_file_button = QPushButton("üìÑ –í—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω HTML-—Ñ–∞–π–ª")
        self.load_multi_file_button = QPushButton("üìÇ –í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ HTML-—Ñ–∞–π–ª–æ–≤")
        self.clear_button = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å")
        self.show_results_button = QPushButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        self.save_txt_button = QPushButton("üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ TXT")
        self.save_excel_button = QPushButton("üìò –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel")
        self.output_table = QTableWidget()
        self.output_table.setColumnCount(5)
        self.output_table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ü—Ä–æ–±–µ–≥", "–¶–µ–Ω–∞", "–î–≤–∏–≥–∞—Ç–µ–ª—å", "–ö–æ—Ä–æ–±–∫–∞"])
        self.output_table.setStyleSheet("background-color: #1e1e1e; color: white; border-radius: 5px;")
        self.output_table.cellClicked.connect(self.show_car_details)
        self.progress_bar_parse = QProgressBar()
        self.progress_bar_parse.setValue(0)
        self.progress_bar_parse.setTextVisible(True)
        self.progress_bar_parse.setStyleSheet("""
            QProgressBar {
                border: 1px solid #444;
                border-radius: 5px;
                background-color: #121212;
                color: white;
            }
            QProgressBar::chunk {
                background-color: #2196F3;
                width: 20px;
            }
        """)
        parse_buttons_layout = QHBoxLayout()
        parse_buttons_layout.addWidget(self.load_single_file_button)
        parse_buttons_layout.addWidget(self.load_multi_file_button)
        parse_buttons_layout.addWidget(self.clear_button)
        parse_action_layout = QHBoxLayout()
        parse_action_layout.addWidget(self.show_results_button)
        parse_action_layout.addWidget(self.save_txt_button)
        parse_action_layout.addWidget(self.save_excel_button)
        layout.addLayout(parse_buttons_layout)
        layout.addLayout(parse_action_layout)
        layout.addWidget(self.output_table)
        layout.addWidget(self.progress_bar_parse)
        tab.setLayout(layout)
        # –°—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
        for btn in [
            self.load_single_file_button, self.load_multi_file_button,
            self.clear_button, self.show_results_button,
            self.save_txt_button, self.save_excel_button
        ]:
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #3e3e3e;
                    color: white;
                    padding: 8px;
                    border-radius: 5px;
                }
                QPushButton:hover {
                    background-color: #555555;
                }
            """)
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        self.load_single_file_button.clicked.connect(self.select_html_file)
        self.load_multi_file_button.clicked.connect(self.select_multiple_html_files)
        self.clear_button.clicked.connect(self.clear_parser_data)
        self.show_results_button.clicked.connect(self.parse_and_show)
        self.save_txt_button.clicked.connect(self.save_parsed_results_txt)
        self.save_excel_button.clicked.connect(self.save_parsed_results_excel)

    def add_urls(self):
        text = self.url_input.toPlainText().strip()
        if not text:
            return
        urls = [url.strip() for url in text.splitlines() if url.strip()]
        self.urls.extend(urls)
        self.url_list.clear()
        self.url_list.addItems(urls)

    def select_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if folder:
            self.folder_path.setText(folder)

    def download_selected(self):
        selected_items = [self.url_list.item(i).text() for i in range(self.url_list.count())]
        folder = self.folder_path.text().strip()
        if not selected_items:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
            return
        if not folder:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        headers = {"User-Agent": "Mozilla/5.0"}
        self.downloaded_files.clear()
        self.progress_bar_download.setRange(0, len(selected_items))
        self.progress_bar_download.setValue(0)
        for idx, url in enumerate(selected_items, start=1):
            try:
                response = requests.get(url, headers=headers, timeout=10)
                response.raise_for_status()
                filename = f"{idx}_{url.split('/')[-2]}.html"
                full_path = os.path.join(folder, filename)
                with open(full_path, "w", encoding="utf-8") as f:
                    f.write(response.text)
                self.downloaded_files.append(full_path)
            except Exception as e:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {url}: {e}")
            self.progress_bar_download.setValue(idx)
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.downloaded_files)} —Ñ–∞–π–ª–æ–≤.")

    def select_html_file(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ HTML —Ñ–∞–π–ª", "", "HTML Files (*.html);;All Files (*)"
        )
        if file_path:
            self.html_files_paths = [file_path]
            self.output_table.setRowCount(0)
            self.parse_and_show()

    def select_multiple_html_files(self):
        file_paths, _ = QFileDialog.getOpenFileNames(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ HTML —Ñ–∞–π–ª—ã", "", "HTML Files (*.html);;All Files (*)"
        )
        if file_paths:
            self.html_files_paths = file_paths
            self.output_table.setRowCount(0)
            self.parse_and_show()

    def clear_parser_data(self):
        self.html_files_paths = []
        self.results = []
        self.output_table.setRowCount(0)
        self.progress_bar_parse.setValue(0)

    def parse_and_show(self):
        if not self.html_files_paths:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω HTML-—Ñ–∞–π–ª.")
            return
        self.results = []
        total_files = len(self.html_files_paths)
        self.progress_bar_parse.setRange(0, total_files * 2)
        self.progress_bar_parse.setValue(0)
        for idx, file_path in enumerate(self.html_files_paths, start=1):
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    html_content = f.read()
                soup = BeautifulSoup(html_content, "html.parser")
                script_tag = soup.find("script", {"data-drom-module": "bulls-list-auto"})
                if script_tag and script_tag.string:
                    data = json.loads(script_tag.string)
                    ads = self.find_bulls(data)
                    if ads and isinstance(ads, list):
                        for ad in ads:
                            if not isinstance(ad, dict):
                                continue
                            title = ad.get("title", "").strip()
                            price = ad.get("price")
                            attributes = [item["payload"] for item in ad.get("attributes", [])
                                          if item.get("type") == "plain"]

                            mileage = next((a for a in attributes if "–∫–º" in a), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                            engine = next((a for a in attributes if any(k in a.lower() for k in ["–ª", "–ª.—Å.", "–ª–∏—Ç—Ä", "—Ç—É—Ä–±–æ–¥–∏–∑–µ–ª—å"])), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                            transmission = next((a for a in attributes if any(k in a.lower() for k in ["–∞–∫–ø–ø", "–∞–≤—Ç–æ–º–∞—Ç", "–º–µ—Ö–∞–Ω–∏–∫–∞", "–≤–∞—Ä–∏–∞—Ç–æ—Ä", "—Ä–æ–±–æ—Ç"])), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

                            price_str = f"{int(price):,} ‚ÇΩ" if price else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                            self.results.append({
                                "title": title,
                                "mileage": mileage,
                                "price": price_str,
                                "engine": engine,
                                "transmission": transmission
                            })
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                return
            self.progress_bar_parse.setValue(idx)
        self.progress_bar_parse.setValue(total_files * 2)
        self.output_table.setRowCount(len(self.results))
        for row, car in enumerate(self.results):
            self.output_table.setItem(row, 0, QTableWidgetItem(car['title']))
            self.output_table.setItem(row, 1, QTableWidgetItem(car['mileage']))
            self.output_table.setItem(row, 2, QTableWidgetItem(car['price']))
            self.output_table.setItem(row, 3, QTableWidgetItem(car['engine']))
            self.output_table.setItem(row, 4, QTableWidgetItem(car['transmission']))

    def show_car_details(self, row, column):
        car_data = self.results[row]
        dialog = CarDetailsDialog(car_data, self)
        dialog.exec_()

    def save_parsed_results_txt(self):
        if not self.results:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        save_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫", "parsed_ads.txt", "Text Files (*.txt)"
        )
        if save_path:
            try:
                with open(save_path, "w", encoding="utf-8") as f:
                    for res in self.results:
                        line = f"{res['title']} | –ü—Ä–æ–±–µ–≥: {res['mileage']} | –¶–µ–Ω–∞: {res['price']} | –î–≤–∏–≥–∞—Ç–µ–ª—å: {res['engine']} | –ö–æ—Ä–æ–±–∫–∞: {res['transmission']}\n"
                        f.write(line)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ TXT.")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

    def save_parsed_results_excel(self):
        if not self.results:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        save_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫", "parsed_ads.xlsx", "Excel Files (*.xlsx)"
        )
        if not save_path:
            return
        try:
            wb = Workbook()
            ws = wb.active
            ws.title = "–û–±—ä—è–≤–ª–µ–Ω–∏—è"
            ws.append(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ü—Ä–æ–±–µ–≥", "–¶–µ–Ω–∞", "–î–≤–∏–≥–∞—Ç–µ–ª—å", "–ö–æ—Ä–æ–±–∫–∞"])
            for res in self.results:
                ws.append([res["title"], res["mileage"], res["price"], res["engine"], res["transmission"]])
            wb.save(save_path)
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel.")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {e}")

    def find_bulls(self, data):
        if isinstance(data, dict):
            for key, value in data.items():
                if key == "bulls":
                    return value
                found = self.find_bulls(value)
                if found:
                    return found
        elif isinstance(data, list):
            for item in data:
                found = self.find_bulls(item)
                if found:
                    return found
        return None


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ModernParserApp()
    window.show()
    sys.exit(app.exec_())